
1.			ft_rev_int_tab

 
#include <stdio.h>

void	ft_rev_int_tab(int *tab, int size);

int 	main(void)
{
	int	tab[6] = {0,1,2,3,4,5};
	int	size = 6;

	ft_rev_int_tab(tab, size);
	printf(" %i %i %i %i %i %i",tab[0],tab[1],tab[2],tab[3],tab[4],tab[5]);
	return 0;
}
*/
void	ft_rev_int_tab(int *tab, int size)
{
	int	i;
	int	swap;

	i = 0;
	while (i < (size / 2))
	{
		swap = tab[i];
		tab[i] = tab[(size - 1) - i];
		tab[(size -1) - i] = swap;
		i++;
	}
}



----------------------------------------------------------------------------------------


2.			ft_sort_int_tab


#include <stdio.h>

void	ft_sort_int_tab(int *tab, int size);

int	main(void)
{
	int	tab[7] = {4,1,5,3,0,2,6};
	int	size = 7;

	ft_sort_int_tab(tab,size);
	printf("%i %i %i %i %i %i %i", tab[0], tab[1], tab[2], tab[3], tab[4], tab[5], tab[6]);
	return 0;
}

void	ft_sort_int_tab(int *tab, int size)
{
	int	i;
	int	swap;

	i = 0;
	while (i < size - 1)
	{
		if (tab[i] > tab[i + 1])
		{
			swap = tab[i];
			tab[i] = tab[i + 1];
			tab[i + 1] = swap;
			i = 0;
		}
		else
			i++;
	}
}



----------------------------------------------------------------------------------------

3.			ft_strncpy

#include <stdio.h>

char	*ft_strncpy(char *dest, char *src, unsigned int n);

int	main(void)
{	
	char	dest[50];
	char	src[50] = {"Hello Word!"};
	
	ft_strncpy(dest, src, 5);
	printf("Resposta:	%s", dest);
	return (0);
}

char	*ft_strncpy(char *dest, char *src, unsigned int n)
{
	unsigned int	i;

	i = 0;
	while (src[i] != '\0' && i < n)
	{
		dest[i] = src[i];
		i++;
	}
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}


----------------------------------------------------------------------------------------


4.			ft_strlcpy

#include <stdio.h>

unsigned int ft_strlcpy(char *dest, char *src, unsigned int size);

int 	main(void)
{
	char	dest[6];
	char	src[] = "Hello, World!";
	
	ft_strlcpy(dest, src, 6);
	
	printf("%s\n", dest);
	return 0;
}

unsigned int	ft_strlcpy(char *dest, char *src, unsigned int size)
{
	unsigned int	i;
	unsigned int	str_len;

	i = 0;
	str_len = 0;
	while (src[str_len] != '\0')
		str_len++;
	if (size != '\0')
	{
		while (i < (size -1) && src[i] != '\0')
		{
			dest[i] = src[i];
			i++;
		}
		dest[i] = '\0';
	}
	return (str_len);
}

----------------------------------------------------------------------------------------


5.			ft_strncmp

#include <stdio.h>
#include <string.h>

int ft_strncmp(char *s1, char *s2, unsigned int n);

int	main(void)
{
	char	s1[] = "Hell World";
	char	s2[] = "Hello Mundo";
	printf("Result:		%i\n", ft_strncmp(s1, s2, 7));
	printf("Result:         %i\n", strncmp(s1, s2, 7));
	return (0);
}
*/
int	ft_strncmp(char *s1, char *s2, unsigned int n)
{
	unsigned int	i;

	i = 0;
	while (i < n && (s1[i] != '\0' || s2[i] != '\0'))
	{
		if (s1[i] != s2[i])
			return (s1[i] - s2[i]);
		i++;
	}
	return (0);
}


----------------------------------------------------------------------------------------


7.			ft_strcat

#include <stdio.h>

char *ft_strcat(char *dest, char *src);

int	main(void)
{
	char dest[] = "Hello ";
	char *src = "world";
	printf("%s", ft_strcat(dest, src));
	return (0);
}
*/
char	*ft_strcat(char *dest, char *src)
{
	int	i;
	int	j;

	i = 0;
	while (dest[i] != '\0')
		i++;
	j = 0;
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}


----------------------------------------------------------------------------------------


8.			ft_strncat

#include <stdio.h>

char *ft_strncat(char *dest, char *src, unsigned int nb);

int	main(void)
{
	char dest[] = "Hello ";
	char src[] = "World!";
	printf("%s\n", ft_strncat(dest, src, 5));
	return (0);
}
*/
char	*ft_strncat(char *dest, char *src, unsigned int nb)
{
	unsigned int	i;
	unsigned int	j;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	j = 0;
	while (src[j] != '\0' && j < nb)
	{
		dest[i] = src[j];
		j++;
		i++;
	}
	dest[i] = '\0';
	return (dest);
}


----------------------------------------------------------------------------------------


9.			ft_strstr

#include <stdio.h>

char *ft_strstr(char *str, char *to_find);

int	main(void)
{
	char *str = "akjslkdjalskjdlkasjldkajsdjjjvacasjjjjjdasdd";
	char *find = "vacas";

	printf("%s", ft_strstr(str,find));
	return (0);
}
*/
char	*ft_strstr(char *str, char *to_find)
{
	int	i;
	int	j;

	i = 0;
	j = 0;
	if (to_find[j] == '\0')
		return (str);
	while (str[i] != '\0')
	{
		while (str[i + j] == to_find[j] && str[i + j] != '\0')
			j++;
		if (to_find[j] == '\0')
			return (str + i);
		i++;
		j = 0;
	}
	return (0);
}


----------------------------------------------------------------------------------------


10.			ft_strlcat

#include <stdio.h>

unsigned int	ft_strlen(char *str);
unsigned int	ft_strlcat(char *dest, char *src, unsigned int size);

int	main(void)
{
	char src[] = "fully truncated";
	char dest[] = "String was";
	printf("%i\n", ft_strlcat(dest,src, 28));
	printf("%s\n", dest);
}
*/
unsigned int	ft_strlen(char *str)
{
	unsigned int	i;

	i = 0;
	while (str[i] != '\0')
	{
		i++;
	}
	return (i);
}

unsigned int	ft_strlcat(char *dest, char *src, unsigned int size)
{
	unsigned int	i;
	unsigned int	j;
	
	i = ft_strlen(dest);
	if (size <= i)
	{
		return (size + ft_strlen(src));
	}
	j = 0;
	while (src[j] && size > i + 1)
	{
		dest[i] = src[i];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (ft_strlen(dest) + ft_strlen(&src[j]));
}


